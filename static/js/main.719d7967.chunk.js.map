{"version":3,"sources":["pages/checkout/routes/checkout-route-path.ts","routes/app-route-path.ts","pages/checkout/components/checkout-stepper/checkout-stepper.tsx","pages/checkout/store/checkout.selectors.ts","pages/checkout/components/confirmation/confirmation.tsx","pages/checkout/components/confirmation/confirmation.props.ts","pages/checkout/components/delivery/components/shipping-method.enum.ts","pages/checkout/components/address/address-form.tsx","pages/checkout/components/signup/signup-form.tsx","pages/checkout/components/delivery/components/shipping-method.tsx","pages/checkout/components/address/address-form.schema.ts","pages/checkout/components/signup/signup-form.schema.ts","pages/checkout/components/delivery/delivery-form.schema.ts","pages/checkout/components/address/address-form-values.initial.ts","pages/checkout/store/checkout-state.intial.ts","pages/checkout/components/delivery/delivery-form-values.initial.ts","pages/checkout/components/signup/signup-form-values.initial.ts","pages/checkout/components/payment/payment-form-values.initial.ts","pages/checkout/components/credit-card/credit-card-form-values.initial.ts","pages/checkout/store/checkout.slice.ts","pages/checkout/components/delivery/delivery.tsx","pages/checkout/components/delivery/delivery.props.ts","pages/checkout/components/credit-card/credit-card.tsx","pages/checkout/components/credit-card/credit-card-form.schema.ts","pages/checkout/components/payment/payment-form.schema.ts","pages/checkout/components/payment/payment.tsx","pages/checkout/components/payment/payment.props.ts","pages/checkout/routes/checkout-routes.tsx","pages/checkout/checkout.tsx","routes/app-routes.tsx","services/i18n.ts","store/root.reducer.ts","store/root.store.ts","App.tsx","reportWebVitals.js","index.tsx"],"names":["CheckoutRoutePath","AppRoutePath","CheckoutStepper","t","useTranslation","path","useRouteMatch","useState","activeStep","setActiveStep","useEffect","includes","Delivery","Payment","Stepper","alternativeLabel","Step","StepLabel","Confirmation","getCheckoutState","state","checkout","checkoutSelectors","getDeliveryForm","createSelector","checkoutState","deliveryForm","getPaymentForm","paymentForm","AddressDisplay","address","firstName","lastName","addressLine1","addressLine2","city","provinceState","country","zipPostalCode","connect","Typography","variant","gutterBottom","shippingAddress","shippingMethod","Divider","sameAsShipping","billingAddress","ShippingMethod","AddressForm","formName","errors","touched","Grid","container","spacing","item","xs","sm","component","TextField","label","name","error","helperText","fullWidth","SignupForm","values","CheckboxWithLabel","type","Label","email","guestCheckout","password","confirmPassword","RadioGroup","FormControlLabel","value","ShippingMethodEnum","free","control","Radio","express","nextDay","addressFormSchema","object","shape","string","required","fieldName","max","notRequired","min","signupFormSchema","boolean","when","is","then","fieldSchema","matches","equals","ref","deliveryFormSchema","mixed","oneOf","Object","signup","initialAddressFormValues","initialCheckoutState","creditCard","cardNumber","expiryDate","securityCode","checkoutSlice","createSlice","initialState","reducers","submitDeliveryForm","action","payload","clearDeliveryForm","submitPaymentForm","clearPaymentForm","DeliveryFormControl","styled","FormControl","display","marginTop","theme","dispatch","formValues","actions","history","useHistory","enableReinitialize","validationSchema","initialValues","onSubmit","push","Checkout","Button","endIcon","size","onClick","Box","textAlign","mt","color","CreditCard","handleChange","mask","maskPlaceholder","onChange","creditCardSchema","paymentFormSchema","PaymentFormControl","goBack","setFieldTouched","justifyContent","CheckoutRoutes","basename","process","exact","to","location","useLocation","console","log","pathname","Paper","p","AppRoutes","loadPath","defaultLanguage","language","rootReducer","combineReducers","reducer","rootStore","configureStore","middleware","devTools","i18n","use","LanguageDetector","initReactI18next","HttpApi","init","backend","fallbackLng","load","debug","changeLanguage","App","Container","maxWidth","fallback","CircularProgress","store","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.719d7967.chunk.js","sourcesContent":["export enum CheckoutRoutePath {\n  Delivery = '/delivery',\n  Payment = '/payment',\n  Confirmation = '/confirmation',\n}\n","export enum AppRoutePath {\n  Checkout = '/checkout',\n}\n","import { Step, StepLabel, Stepper } from '@material-ui/core';\nimport React from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useRouteMatch } from 'react-router-dom';\n\nimport { CheckoutRoutePath } from '../../routes/checkout-route-path';\n\nexport const CheckoutStepper: FunctionComponent = () => {\n  const { t } = useTranslation();\n  let { path } = useRouteMatch();\n  const [activeStep, setActiveStep] = useState<number>(0);\n\n  useEffect(() => {\n    if (path.includes(CheckoutRoutePath.Delivery)) {\n      setActiveStep(0);\n    } else if (path.includes(CheckoutRoutePath.Payment)) {\n      setActiveStep(1);\n    } else {\n      setActiveStep(2);\n    }\n  }, [path]);\n\n  return (\n    <Stepper alternativeLabel activeStep={activeStep}>\n      <Step key={CheckoutRoutePath.Delivery}>\n        <StepLabel>{t('checkout.delivery')}</StepLabel>\n      </Step>\n      <Step key={CheckoutRoutePath.Payment}>\n        <StepLabel>{t('checkout.payment')}</StepLabel>\n      </Step>\n      <Step key={CheckoutRoutePath.Confirmation}>\n        <StepLabel>{t('checkout.confirmation')}</StepLabel>\n      </Step>\n    </Stepper>\n  );\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport { RootState } from '../../../store/root-state.interface';\nimport { DeliveryFormValues } from '../components/delivery/delivery-form-values.interface';\nimport { PaymentFormValues } from '../components/payment/payment-form-values.interface';\n\nimport { CheckoutState } from './checkout-state.interface';\n\nconst getCheckoutState = (state: RootState): CheckoutState => state.checkout;\n\nconst getDeliveryForm = createSelector(\n  getCheckoutState,\n  (checkoutState: CheckoutState): DeliveryFormValues =>\n    checkoutState?.deliveryForm\n);\n\nconst getPaymentForm = createSelector(\n  getCheckoutState,\n  (checkoutState: CheckoutState): PaymentFormValues =>\n    checkoutState?.paymentForm\n);\n\nexport const checkoutSelectors = {\n  getCheckoutState,\n  getDeliveryForm,\n  getPaymentForm,\n};\n","import { Typography, Divider } from '@material-ui/core';\nimport React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\n\nimport { AddressFormValues } from '../address/address-form-values.interface';\nimport { CheckoutStepper } from '../checkout-stepper/checkout-stepper';\n\nimport { ConfirmationProps, mapStateToProps } from './confirmation.props';\n\nconst AddressDisplay: FunctionComponent<{ address: AddressFormValues }> = ({\n  address,\n}) => {\n  return (\n    <>\n      {address.firstName} {address.lastName} <br />\n      {address.addressLine1} <br />\n      {address.addressLine2 && (\n        <>\n          {address.addressLine2} <br />\n        </>\n      )}\n      {address.city}, {address.provinceState}, {address.country}{' '}\n      {address.zipPostalCode}\n    </>\n  );\n};\n\nconst Confirmation: FunctionComponent<ConfirmationProps> = ({\n  deliveryForm,\n  paymentForm,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <CheckoutStepper />\n      <Typography variant=\"h3\" gutterBottom>\n        {t('checkout.delivery')}\n      </Typography>\n      <Typography variant=\"h6\" gutterBottom>\n        {t('checkout.shippingAddress')}\n      </Typography>\n      <Typography variant=\"body1\" gutterBottom>\n        <AddressDisplay address={deliveryForm.shippingAddress} />\n      </Typography>\n      <Typography variant=\"h6\" gutterBottom>\n        {t('checkout.shippingMethod.title')}\n      </Typography>\n      <Typography variant=\"body1\" gutterBottom>\n        {t('checkout.shippingMethod.' + deliveryForm.shippingMethod)}\n      </Typography>\n      <Divider />\n\n      <Typography variant=\"h3\" gutterBottom>\n        {t('checkout.payment')}\n      </Typography>\n      <Typography variant=\"h6\" gutterBottom>\n        {t('checkout.billingAddress')}\n      </Typography>\n      {paymentForm.sameAsShipping && t('checkout.sameAsShipping')}\n      {!paymentForm.sameAsShipping && (\n        <Typography variant=\"body1\" gutterBottom>\n          <AddressDisplay address={paymentForm.billingAddress} />\n        </Typography>\n      )}\n    </>\n  );\n};\n\nexport default connect(mapStateToProps)(Confirmation);\n","import { RootState } from '../../../../store/root-state.interface';\nimport { checkoutSelectors } from '../../store/checkout.selectors';\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    deliveryForm: checkoutSelectors.getDeliveryForm(state),\n    paymentForm: checkoutSelectors.getPaymentForm(state),\n  };\n};\n\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>;\n\ntype ConfirmationProps = mapStateToPropsType & {};\n\nexport { mapStateToProps };\nexport type { ConfirmationProps };\n","export enum ShippingMethod {\n  free = 'free',\n  express = 'express',\n  nextDay = 'nextDay',\n}\n","import { Grid } from '@material-ui/core';\nimport { Field, FormikErrors, FormikTouched } from 'formik';\nimport { TextField } from 'formik-material-ui';\nimport React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { AddressFormValues } from './address-form-values.interface';\n\nexport interface AddressFormProps {\n  formName: string;\n  errors?: FormikErrors<AddressFormValues>;\n  touched?: FormikTouched<AddressFormValues>;\n}\n\nexport const AddressForm: FunctionComponent<AddressFormProps> = ({\n  formName = 'address',\n  errors,\n  touched,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={12} sm={6}>\n        <Field\n          component={TextField}\n          label={t('address.firstName')}\n          name={`${formName}.firstName`}\n          variant=\"outlined\"\n          error={touched?.firstName && !!errors?.firstName}\n          helperText={touched?.firstName && errors?.firstName}\n          fullWidth\n        />\n      </Grid>\n      <Grid item xs={12} sm={6}>\n        <Field\n          component={TextField}\n          label={t('address.lastName')}\n          name={`${formName}.lastName`}\n          variant=\"outlined\"\n          error={touched?.lastName && !!errors?.lastName}\n          helperText={touched?.lastName && errors?.lastName}\n          fullWidth\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <Field\n          component={TextField}\n          label={t('address.addressLine1')}\n          name={`${formName}.addressLine1`}\n          variant=\"outlined\"\n          error={touched?.addressLine1 && !!errors?.addressLine1}\n          helperText={touched?.addressLine1 && !!errors?.addressLine1}\n          fullWidth\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <Field\n          component={TextField}\n          label={t('address.addressLine2')}\n          name={`${formName}.addressLine2`}\n          variant=\"outlined\"\n          error={touched?.addressLine2 && !!errors?.addressLine2}\n          helperText={touched?.addressLine2 && errors?.addressLine2}\n          fullWidth\n        />\n      </Grid>\n      <Grid item xs={12} sm={6}>\n        <Field\n          component={TextField}\n          label={t('address.city')}\n          name={`${formName}.city`}\n          variant=\"outlined\"\n          error={touched?.city && !!errors?.city}\n          helperText={touched?.city && errors?.city}\n          fullWidth\n        />\n      </Grid>\n      <Grid item xs={12} sm={6}>\n        <Field\n          component={TextField}\n          label={t('address.provinceState')}\n          name={`${formName}.provinceState`}\n          variant=\"outlined\"\n          error={touched?.provinceState && !!errors?.provinceState}\n          helperText={touched?.provinceState && errors?.provinceState}\n          fullWidth\n        />\n      </Grid>\n      <Grid item xs={12} sm={6}>\n        <Field\n          component={TextField}\n          label={t('address.country')}\n          name={`${formName}.country`}\n          variant=\"outlined\"\n          error={touched?.country && !!errors?.country}\n          helperText={touched?.country && errors?.country}\n          fullWidth\n        />\n      </Grid>\n      <Grid item xs={12} sm={6}>\n        <Field\n          component={TextField}\n          label={t('address.zipPostalCode')}\n          name={`${formName}.zipPostalCode`}\n          variant=\"outlined\"\n          error={touched?.zipPostalCode && !!errors?.zipPostalCode}\n          helperText={touched?.zipPostalCode && errors?.zipPostalCode}\n          fullWidth\n        />\n      </Grid>\n    </Grid>\n  );\n};\n","import { Grid } from '@material-ui/core';\nimport { Field, FormikErrors, FormikTouched } from 'formik';\nimport { CheckboxWithLabel, TextField } from 'formik-material-ui';\nimport React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { SignupFormValues } from './signup-form-values.interface';\n\nexport interface SignUpFormProps {\n  formName: string;\n  errors?: FormikErrors<SignupFormValues>;\n  touched?: FormikTouched<SignupFormValues>;\n  values: SignupFormValues;\n}\n\nexport const SignupForm: FunctionComponent<SignUpFormProps> = ({\n  formName = 'signup',\n  errors,\n  touched,\n  values,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={12}>\n        <Field\n          component={CheckboxWithLabel}\n          type=\"checkbox\"\n          name={`${formName}.guestCheckout`}\n          Label={{ label: t('signup.guestCheckout') }}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <Field\n          component={TextField}\n          label={t('signup.email')}\n          name={`${formName}.email`}\n          variant=\"outlined\"\n          error={touched?.email && !!errors?.email}\n          helperText={touched?.email && errors?.email}\n          type=\"email\"\n          fullWidth\n        />\n      </Grid>\n      {!values?.guestCheckout && (\n        <>\n          <Grid item xs={12} sm={6}>\n            <Field\n              component={TextField}\n              label={t('signup.password')}\n              name={`${formName}.password`}\n              variant=\"outlined\"\n              error={touched?.password && !!errors?.password}\n              helperText={touched?.password && errors?.password}\n              type=\"password\"\n              fullWidth\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Field\n              component={TextField}\n              label={t('signup.confirmPassword')}\n              name={`${formName}.confirmPassword`}\n              variant=\"outlined\"\n              error={touched?.confirmPassword && !!errors?.confirmPassword}\n              helperText={touched?.confirmPassword && errors?.confirmPassword}\n              type=\"password\"\n              fullWidth\n            />\n          </Grid>\n        </>\n      )}\n    </Grid>\n  );\n};\n","import { FormControlLabel, Radio } from '@material-ui/core';\nimport { Field } from 'formik';\nimport { RadioGroup } from 'formik-material-ui';\nimport React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { ShippingMethod as ShippingMethodEnum } from './shipping-method.enum';\n\nexport interface ShippingMethodProps {\n  formName?: string;\n}\n\nexport const ShippingMethod: FunctionComponent<ShippingMethodProps> = ({\n  formName = 'shippingMethod',\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Field component={RadioGroup} name={formName}>\n      <FormControlLabel\n        value={ShippingMethodEnum.free}\n        control={<Radio />}\n        label={t('checkout.shippingMethod.free')}\n      />\n      <FormControlLabel\n        value={ShippingMethodEnum.express}\n        control={<Radio />}\n        label={t('checkout.shippingMethod.express')}\n      />\n      <FormControlLabel\n        value={ShippingMethodEnum.nextDay}\n        control={<Radio />}\n        label={t('checkout.shippingMethod.nextDay')}\n      />\n    </Field>\n  );\n};\n","import { TFunction } from 'i18next';\nimport { object, string } from 'yup';\n\nexport const addressFormSchema = (t: TFunction) => {\n  return object().shape({\n    firstName: string()\n      .required(\n        t('errorMessages.required', { fieldName: t('address.firstName') })\n      )\n      .max(30, t('errorMessages.tooLong', { max: 30 })),\n    lastName: string()\n      .required(\n        t('errorMessages.required', { fieldName: t('address.lastName') })\n      )\n      .max(30, t('errorMessages.tooLong', { max: 30 })),\n    addressLine1: string()\n      .required(\n        t('errorMessages.required', { fieldName: t('address.addressLine1') })\n      )\n      .max(200, t('errorMessages.tooLong', { max: 200 })),\n    addressLine2: string().notRequired(),\n    city: string()\n      .required(\n        t('errorMessages.required', { fieldName: t('address.addressLine2') })\n      )\n      .max(30, t('errorMessages.tooLong', { max: 30 })),\n    provinceState: string()\n      .required(\n        t('errorMessages.required', { fieldName: t('address.provinceState') })\n      )\n      .max(30, t('errorMessages.tooLong', { max: 30 })),\n    country: string()\n      .required(\n        t('errorMessages.required', { fieldName: t('address.country') })\n      )\n      .max(30, t('errorMessages.tooLong', { max: 30 })),\n    zipPostalCode: string()\n      .required(\n        t('errorMessages.required', { fieldName: t('address.zipPostalCode') })\n      )\n      .min(5, t('errorMessages.tooShort', { min: 5 }))\n      .max(7, t('errorMessages.tooLong', { max: 7 })),\n  });\n};\n","import { TFunction } from 'i18next';\nimport { object, string, boolean, ref } from 'yup';\n\nexport const signupFormSchema = (t: TFunction) => {\n  return object().shape({\n    guestCheckout: boolean(),\n    email: string()\n      .email(t('errorMessages.email'))\n      .required(t('errorMessages.required', { fieldName: t('signup.email') })),\n    password: string().when('guestCheckout', {\n      is: false,\n      then: (fieldSchema) =>\n        fieldSchema\n          .required(\n            t('errorMessages.required', { fieldName: t('signup.password') })\n          )\n          .matches(\n            /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n            t('errorMessages.password')\n          ),\n    }),\n    confirmPassword: string().when('guestCheckout', {\n      is: false,\n      then: (fieldSchema) =>\n        fieldSchema\n          .required(\n            t('errorMessages.required', {\n              fieldName: t('signup.confirmPassword'),\n            })\n          )\n          .equals([ref('password')], t('errorMessages.confirmPassword')),\n    }),\n  });\n};\n","import { TFunction } from 'i18next';\nimport { mixed, object } from 'yup';\n\nimport { addressFormSchema } from '../address/address-form.schema';\nimport { signupFormSchema } from '../signup/signup-form.schema';\n\nimport { ShippingMethod } from './components/shipping-method.enum';\n\nexport const deliveryFormSchema = (t: TFunction) =>\n  object().shape({\n    shippingAddress: addressFormSchema(t),\n    shippingMethod: mixed<ShippingMethod>().oneOf(\n      Object.values(ShippingMethod) as ShippingMethod[]\n    ),\n    signup: signupFormSchema(t),\n  });\n","import { AddressFormValues } from './address-form-values.interface';\n\nexport const initialAddressFormValues: AddressFormValues = {\n  firstName: '',\n  lastName: '',\n  addressLine1: '',\n  addressLine2: '',\n  city: '',\n  provinceState: '',\n  country: '',\n  zipPostalCode: '',\n};\n","import { initialDevlieryFormValues } from '../components/delivery/delivery-form-values.initial';\nimport { initialPaymentFormValues } from '../components/payment/payment-form-values.initial';\n\nimport { CheckoutState } from './checkout-state.interface';\n\nexport const initialCheckoutState: CheckoutState = {\n  deliveryForm: initialDevlieryFormValues,\n  paymentForm: initialPaymentFormValues,\n};\n","import { initialAddressFormValues } from '../address/address-form-values.initial';\nimport { initialSignupFormValues } from '../signup/signup-form-values.initial';\n\nimport { ShippingMethod } from './components/shipping-method.enum';\nimport { DeliveryFormValues } from './delivery-form-values.interface';\n\nexport const initialDevlieryFormValues: DeliveryFormValues = {\n  shippingAddress: initialAddressFormValues,\n  shippingMethod: ShippingMethod.free,\n  signup: initialSignupFormValues,\n};\n","import { SignupFormValues } from './signup-form-values.interface';\n\nexport const initialSignupFormValues: SignupFormValues = {\n  guestCheckout: false,\n  email: '',\n  password: '',\n  confirmPassword: '',\n};\n","import { initialAddressFormValues } from '../address/address-form-values.initial';\nimport { initialCreditCardValues } from '../credit-card/credit-card-form-values.initial';\n\nimport { PaymentFormValues } from './payment-form-values.interface';\n\nexport const initialPaymentFormValues: PaymentFormValues = {\n  sameAsShipping: false,\n  billingAddress: initialAddressFormValues,\n  creditCard: initialCreditCardValues,\n};\n","import { CreditCardFormValues } from './credit-card-form-values.interface';\n\nexport const initialCreditCardValues: CreditCardFormValues = {\n  cardNumber: '',\n  expiryDate: '',\n  securityCode: '',\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { DeliveryFormValues } from '../components/delivery/delivery-form-values.interface';\nimport { PaymentFormValues } from '../components/payment/payment-form-values.interface';\n\nimport { CheckoutState } from './checkout-state.interface';\nimport { initialCheckoutState } from './checkout-state.intial';\n\nexport const checkoutSlice = createSlice({\n  name: 'checkout',\n  initialState: initialCheckoutState,\n  reducers: {\n    submitDeliveryForm(\n      state: CheckoutState,\n      action: PayloadAction<DeliveryFormValues>\n    ) {\n      state.deliveryForm = action.payload;\n    },\n    clearDeliveryForm(state: CheckoutState) {\n      state.deliveryForm = initialCheckoutState.deliveryForm;\n    },\n    submitPaymentForm(\n      state: CheckoutState,\n      action: PayloadAction<PaymentFormValues>\n    ) {\n      state.paymentForm = action.payload;\n    },\n    clearPaymentForm(state: CheckoutState) {\n      state.paymentForm = initialCheckoutState.paymentForm;\n    },\n  },\n});\n","import { Box, Button, FormControl, Typography } from '@material-ui/core';\nimport { styled } from '@material-ui/core/styles';\nimport ArrowRightAltIcon from '@material-ui/icons/ArrowRightAlt';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport { Form, Formik } from 'formik';\nimport React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { AppRoutePath } from '../../../../routes/app-route-path';\nimport { CheckoutRoutePath } from '../../routes/checkout-route-path';\nimport { AddressForm } from '../address/address-form';\nimport { CheckoutStepper } from '../checkout-stepper/checkout-stepper';\nimport { SignupForm } from '../signup/signup-form';\n\nimport { ShippingMethod } from './components/shipping-method';\nimport { DeliveryFormValues } from './delivery-form-values.interface';\nimport { deliveryFormSchema } from './delivery-form.schema';\nimport {\n  DeliveryFormProps,\n  mapDispatchToProps,\n  mapStateToProps,\n} from './delivery.props';\n\nconst DeliveryFormControl = styled(FormControl)(({ theme }) => ({\n  display: 'block',\n  marginTop: theme.spacing(2),\n}));\n\nconst Delivery: FunctionComponent<DeliveryFormProps> = ({\n  deliveryForm,\n  submitDeliveryForm,\n  clearDeliveryForm,\n}) => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const submitForm = (values: DeliveryFormValues) => {\n    submitDeliveryForm(values);\n    history.push(AppRoutePath.Checkout + CheckoutRoutePath.Payment);\n  };\n\n  return (\n    <>\n      <CheckoutStepper />\n      <Formik\n        enableReinitialize={true}\n        validationSchema={deliveryFormSchema(t)}\n        initialValues={deliveryForm}\n        onSubmit={submitForm}\n      >\n        {({ errors, touched, values }) => (\n          <Form>\n            <DeliveryFormControl>\n              <Button\n                type=\"reset\"\n                variant=\"contained\"\n                endIcon={<ClearIcon />}\n                size=\"large\"\n                onClick={clearDeliveryForm}\n              >\n                {t('checkout.clear')}\n              </Button>\n            </DeliveryFormControl>\n            <DeliveryFormControl>\n              <Typography variant=\"h5\" component=\"legend\" gutterBottom>\n                {t('checkout.shippingAddress')}\n              </Typography>\n              <AddressForm\n                formName=\"shippingAddress\"\n                errors={errors.shippingAddress}\n                touched={touched.shippingAddress}\n              />\n            </DeliveryFormControl>\n            <DeliveryFormControl>\n              <Typography variant=\"h5\" component=\"legend\" gutterBottom>\n                {t('checkout.shippingMethod.title')}\n              </Typography>\n              <ShippingMethod />\n            </DeliveryFormControl>\n            <DeliveryFormControl>\n              <Typography variant=\"h5\" component=\"legend\" gutterBottom>\n                {t('checkout.customerInfo')}\n              </Typography>\n              <SignupForm\n                formName=\"signup\"\n                errors={errors.signup}\n                touched={touched.signup}\n                values={values.signup}\n              />\n            </DeliveryFormControl>\n            <Box textAlign=\"right\" mt={2}>\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                endIcon={<ArrowRightAltIcon />}\n                size=\"large\"\n              >\n                {t('checkout.continue')}\n              </Button>\n            </Box>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Delivery);\n","import { Dispatch } from '@reduxjs/toolkit';\n\nimport { RootState } from '../../../../store/root-state.interface';\nimport { checkoutSelectors } from '../../store/checkout.selectors';\nimport { checkoutSlice } from '../../store/checkout.slice';\n\nimport { DeliveryFormValues } from './delivery-form-values.interface';\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    deliveryForm: checkoutSelectors.getDeliveryForm(state),\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    submitDeliveryForm(formValues: DeliveryFormValues) {\n      dispatch(checkoutSlice.actions.submitDeliveryForm(formValues));\n    },\n    clearDeliveryForm() {\n      dispatch(checkoutSlice.actions.clearDeliveryForm());\n    },\n  };\n};\n\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>;\ntype mapDispatchToPropsType = ReturnType<typeof mapDispatchToProps>;\n\ntype DeliveryFormProps = mapStateToPropsType & mapDispatchToPropsType;\n\nexport { mapStateToProps, mapDispatchToProps };\nexport type { DeliveryFormProps };\n","import { Grid, TextField } from '@material-ui/core';\nimport { FormikErrors, FormikTouched } from 'formik';\nimport React, { ChangeEvent, FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport InputMask from 'react-input-mask';\n\nimport { CreditCardFormValues } from './credit-card-form-values.interface';\n\nexport interface CreditCardProps {\n  formName?: string;\n  errors?: FormikErrors<CreditCardFormValues>;\n  touched?: FormikTouched<CreditCardFormValues>;\n  values: CreditCardFormValues;\n  handleChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const CreditCard: FunctionComponent<CreditCardProps> = ({\n  formName = 'creditCard',\n  errors,\n  touched,\n  values,\n  handleChange,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <Grid container spacing={2}>\n        <Grid item xs={12} sm={12}>\n          <InputMask\n            mask=\"9999-9999-9999-9999\"\n            maskPlaceholder=\"####-####-####-####\"\n            name={`${formName}.cardNumber`}\n            value={values.cardNumber}\n            onChange={handleChange}\n          >\n            <TextField\n              label={t('creditCard.cardNumber')}\n              variant=\"outlined\"\n              error={touched?.cardNumber && !!errors?.cardNumber}\n              helperText={touched?.cardNumber && errors?.cardNumber}\n              fullWidth\n            />\n          </InputMask>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <InputMask\n            mask=\"99/9999\"\n            maskPlaceholder=\"mm/yyyy\"\n            name={`${formName}.expiryDate`}\n            value={values.expiryDate}\n            onChange={handleChange}\n          >\n            <TextField\n              label={t('creditCard.expiryDate')}\n              variant=\"outlined\"\n              error={touched?.expiryDate && !!errors?.expiryDate}\n              helperText={touched?.expiryDate && errors?.expiryDate}\n              fullWidth\n            />\n          </InputMask>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <InputMask\n            mask=\"999\"\n            name={`${formName}.securityCode`}\n            value={values.securityCode}\n            onChange={handleChange}\n          >\n            <TextField\n              label={t('creditCard.securityCode')}\n              variant=\"outlined\"\n              error={touched?.securityCode && !!errors?.securityCode}\n              helperText={touched?.securityCode && errors?.securityCode}\n              fullWidth\n            />\n          </InputMask>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n","import { TFunction } from 'i18next';\nimport { string, object } from 'yup';\n\nexport const creditCardSchema = (t: TFunction) =>\n  object().shape({\n    cardNumber: string()\n      .required(\n        t('errorMessages.required', { fieldName: t('creditCard.cardNumber') })\n      )\n      .matches(\n        /[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{4}/,\n        t('errorMessages.invalidFormat')\n      ),\n    expiryDate: string()\n      .required(\n        t('errorMessages.required', { fieldName: t('creditCard.expiryDate') })\n      ) // regex from https://stackoverflow.com/questions/7992477/regular-expression-to-describe-credit-card-expiry-valid-thru-date\n      .matches(/(0[1-9]|1[0-2])\\/[0-9]{2}/, t('errorMessages.invalidFormat')),\n    securityCode: string()\n      .required(\n        t('errorMessages.required', {\n          fieldName: t('creditCard.securityCode'),\n        })\n      )\n      .matches(/[0-9]{3}/, t('errorMessages.invalidFormat')),\n  });\n","import { TFunction } from 'i18next';\nimport { boolean, object } from 'yup';\n\nimport { addressFormSchema } from '../address/address-form.schema';\nimport { creditCardSchema } from '../credit-card/credit-card-form.schema';\n\nexport const paymentFormSchema = (t: TFunction) =>\n  object().shape({\n    sameAsShipping: boolean(),\n    billingAddress: object().when('sameAsShipping', {\n      is: (sameAsShipping: boolean) => !sameAsShipping,\n      then: addressFormSchema(t),\n    }),\n    creditCard: creditCardSchema(t),\n  });\n","import { Box, Button, FormControl, Typography } from '@material-ui/core';\nimport { styled } from '@material-ui/core/styles';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowRightAltIcon from '@material-ui/icons/ArrowRightAlt';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport { Field, Form, Formik } from 'formik';\nimport { CheckboxWithLabel } from 'formik-material-ui';\nimport React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { AppRoutePath } from '../../../../routes/app-route-path';\nimport { CheckoutRoutePath } from '../../routes/checkout-route-path';\nimport { AddressForm } from '../address/address-form';\nimport { CheckoutStepper } from '../checkout-stepper/checkout-stepper';\nimport { CreditCard } from '../credit-card/credit-card';\n\nimport { PaymentFormValues } from './payment-form-values.interface';\nimport { paymentFormSchema } from './payment-form.schema';\nimport {\n  mapDispatchToProps,\n  mapStateToProps,\n  PaymentFormProps,\n} from './payment.props';\n\nconst PaymentFormControl = styled(FormControl)(({ theme }) => ({\n  display: 'block',\n  marginTop: theme.spacing(2),\n}));\n\nexport const Payment: FunctionComponent<PaymentFormProps> = ({\n  paymentForm,\n  submitPaymentForm,\n  clearPaymentForm,\n}) => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const goBack = () => {\n    history.push(AppRoutePath.Checkout + CheckoutRoutePath.Delivery);\n  };\n  const submitForm = (values: PaymentFormValues) => {\n    submitPaymentForm(values);\n    history.push(AppRoutePath.Checkout + CheckoutRoutePath.Confirmation);\n  };\n\n  return (\n    <>\n      <CheckoutStepper />\n      <Formik\n        validationSchema={paymentFormSchema(t)}\n        initialValues={paymentForm}\n        onSubmit={submitForm}\n      >\n        {({ errors, touched, values, handleChange, setFieldTouched }) => (\n          <Form>\n            <PaymentFormControl>\n              <Button\n                type=\"reset\"\n                variant=\"contained\"\n                endIcon={<ClearIcon />}\n                size=\"large\"\n                onClick={clearPaymentForm}\n              >\n                {t('checkout.clear')}\n              </Button>\n            </PaymentFormControl>\n            <PaymentFormControl>\n              <Typography variant=\"h5\" component=\"legend\" gutterBottom>\n                {t('checkout.billingAddress')}\n              </Typography>\n              <Field\n                component={CheckboxWithLabel}\n                type=\"checkbox\"\n                name=\"sameAsShipping\"\n                Label={{ label: t('checkout.sameAsShipping') }}\n              />\n              {!values.sameAsShipping && (\n                <AddressForm\n                  formName=\"billingAddress\"\n                  errors={errors.billingAddress}\n                  touched={touched.billingAddress}\n                />\n              )}\n            </PaymentFormControl>\n            <PaymentFormControl>\n              <Typography variant=\"h5\" component=\"legend\" gutterBottom>\n                {t('checkout.creditCard')}\n              </Typography>\n              <CreditCard\n                formName=\"creditCard\"\n                errors={errors.creditCard}\n                touched={touched.creditCard}\n                values={values.creditCard}\n                handleChange={handleChange}\n              />\n            </PaymentFormControl>\n            <Box\n              textAlign=\"right\"\n              display=\"flex\"\n              justifyContent=\"space-between\"\n              mt={2}\n            >\n              <Button\n                type=\"button\"\n                variant=\"contained\"\n                color=\"secondary\"\n                endIcon={<ArrowBackIcon />}\n                size=\"large\"\n                onClick={goBack}\n              >\n                {t('checkout.previous')}\n              </Button>\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                endIcon={<ArrowRightAltIcon />}\n                size=\"large\"\n              >\n                {t('checkout.continue')}\n              </Button>\n            </Box>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Payment);\n","import { Dispatch } from '@reduxjs/toolkit';\n\nimport { RootState } from '../../../../store/root-state.interface';\nimport { checkoutSelectors } from '../../store/checkout.selectors';\nimport { checkoutSlice } from '../../store/checkout.slice';\n\nimport { PaymentFormValues } from './payment-form-values.interface';\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    paymentForm: checkoutSelectors.getPaymentForm(state),\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    submitPaymentForm(formValues: PaymentFormValues) {\n      dispatch(checkoutSlice.actions.submitPaymentForm(formValues));\n    },\n    clearPaymentForm() {\n      dispatch(checkoutSlice.actions.clearPaymentForm());\n    },\n  };\n};\n\ntype mapStateToPropsType = ReturnType<typeof mapStateToProps>;\ntype mapDispatchToPropsType = ReturnType<typeof mapDispatchToProps>;\n\ntype PaymentFormProps = mapStateToPropsType & mapDispatchToPropsType;\n\nexport { mapStateToProps, mapDispatchToProps };\nexport type { PaymentFormProps };\n","import React from 'react';\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  Redirect,\n  useRouteMatch,\n} from 'react-router-dom';\n\nimport Confirmation from '../components/confirmation/confirmation';\nimport Delivery from '../components/delivery/delivery';\nimport Payment from '../components/payment/payment';\n\nimport { CheckoutRoutePath } from './checkout-route-path';\n\nexport default function CheckoutRoutes() {\n  let { path } = useRouteMatch();\n\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path={path + CheckoutRoutePath.Delivery}>\n          <Delivery />\n        </Route>\n        <Route path={path + CheckoutRoutePath.Payment}>\n          <Payment />\n        </Route>\n        <Route path={path + CheckoutRoutePath.Confirmation}>\n          <Confirmation />\n        </Route>\n        <Route exact path={path}>\n          <Redirect to={path + CheckoutRoutePath.Delivery} />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n","import { Box, Paper } from '@material-ui/core';\nimport React, { useEffect } from 'react';\nimport { FunctionComponent } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport CheckoutRoutes from './routes/checkout-routes';\n\nexport const Checkout: FunctionComponent = () => {\n  const location = useLocation();\n\n  useEffect(() => {\n    console.log('checkout route has been changed');\n  }, [location.pathname]);\n\n  return (\n    <Paper>\n      <Box p={3}>\n        <CheckoutRoutes />\n      </Box>\n    </Paper>\n  );\n};\n","import React from 'react';\nimport { Switch, Route, Redirect, BrowserRouter } from 'react-router-dom';\n\nimport { Checkout } from '../pages/checkout/checkout';\n\nimport { AppRoutePath } from './app-route-path';\n\nexport default function AppRoutes() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path={AppRoutePath.Checkout}>\n          <Checkout />\n        </Route>\n        <Route exact path=\"/\">\n          <Redirect to={AppRoutePath.Checkout} />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n","import i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport HttpApi from 'i18next-http-backend';\nimport { initReactI18next } from 'react-i18next';\n\nfunction initI18n(loadPath: string, defaultLanguage: string) {\n  return i18n\n    .use(LanguageDetector)\n    .use(initReactI18next)\n    .use(HttpApi)\n    .init({\n      backend: { loadPath },\n      fallbackLng: defaultLanguage,\n      load: 'currentOnly',\n      debug: process.env.NODE_ENV === 'development',\n    });\n}\n\nfunction getCurrentLanguage(): string {\n  return i18n.language;\n}\n\nfunction changeLanguage(language: string) {\n  return i18n.changeLanguage(language);\n}\n\nfunction onLanguageChanged(callback: (language: string) => void) {\n  return i18n.on('languageChanged', callback);\n}\n\nexport { initI18n, getCurrentLanguage, changeLanguage, onLanguageChanged };\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport { checkoutSlice } from '../pages/checkout/store/checkout.slice';\n\nimport { RootState } from './root-state.interface';\n\nexport const rootReducer = combineReducers<RootState>({\n  checkout: checkoutSlice.reducer,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\n\nimport { rootReducer } from './root.reducer';\n\nconst isDevelopment = process.env.NODE_ENV === 'development';\n\nconst rootStore = configureStore({\n  reducer: rootReducer,\n  middleware: isDevelopment ? [logger] : [],\n  devTools: isDevelopment,\n});\n\nexport { rootStore };\n","import { Container, CircularProgress } from '@material-ui/core';\nimport React, { Suspense } from 'react';\nimport { Provider } from 'react-redux';\n\nimport AppRoutes from './routes/app-routes';\nimport { changeLanguage, initI18n } from './services/i18n';\nimport { rootStore } from './store/root.store';\n\nconst defaultLanguage = 'en-GB';\ninitI18n(process.env.PUBLIC_URL + '/i18n/{{lng}}.json', defaultLanguage);\nchangeLanguage(defaultLanguage);\n\nfunction App() {\n  return (\n    <Container maxWidth=\"lg\">\n      <Suspense fallback={<CircularProgress />}>\n        <Provider store={rootStore}>\n          <AppRoutes />\n        </Provider>\n      </Suspense>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}